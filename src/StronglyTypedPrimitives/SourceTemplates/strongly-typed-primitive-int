#nullable enable

using Newtonsoft.Json;

namespace NAMESPACE
{
    [global::Newtonsoft.Json.JsonConverter(typeof(PLACEHOLDERNewtonsoftJsonConverter))]
    partial struct PLACEHOLDER : IComparable<PLACEHOLDER>, IEquatable<PLACEHOLDER>
    {
        private readonly int _value;

        [Obsolete("Don't use the default constructor", true)]
        public PLACEHOLDER() => throw new NotImplementedException();

        public static implicit operator int(PLACEHOLDER value) => value._value;

        public static implicit operator PLACEHOLDER(int value) => new(value);

        public int CompareTo(PLACEHOLDER other) => _value.CompareTo(other);

        public bool Equals(PLACEHOLDER other) => _value.Equals(other._value);

        public override bool Equals(object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            return obj is PLACEHOLDER other && Equals(other);
        }

        public override int GetHashCode() => _value.GetHashCode();

        public override string ToString() => _value.ToString();

        public static bool operator ==(PLACEHOLDER left, PLACEHOLDER right) =>
            left.Equals(right);

        public static bool operator !=(PLACEHOLDER left, PLACEHOLDER right) =>
            !(left == right);

        public partial class PLACEHOLDERNewtonsoftJsonConverter
            : JsonConverter<PLACEHOLDER>
        {
            public override void WriteJson(
                JsonWriter writer,
                PLACEHOLDER value,
                JsonSerializer serializer
            )
            {
                writer.WriteValue(value.ToString());
            }

            public override PLACEHOLDER ReadJson(
                JsonReader reader,
                Type objectType,
                PLACEHOLDER existingValue,
                bool hasExistingValue,
                JsonSerializer serializer
            )
            {
                var value = reader.ReadAsInt32();
                if (!value.HasValue)
                {
                    throw new JsonSerializationException("Value cannot be null");
                }
                return new PLACEHOLDER(value.Value);
            }
        }
    }
}
