@startuml C4 Code

class Setlist {
    +string ArtistId
    +string ArtistName
    +DateTime Date
    +Location Location
    +Set[] Sets
}

class Set {
    +string Name
    +Song[] Songs
    +TimeSpan Duration
}

class Song {
    +string Name
    +int Position
    +string Transition
    +string Footnote
    +TimeSpan Duration
}

class Location {
    +string Venue
    +string City
    +string State
    +string Country
}

Setlist --* Set : 1..*
Setlist --* Location
Set --* Song : 1..*

class Comment <<Aggregate>> {
    +string Id
    +string Author
    +string Body
    +string Permalink
    +string Subreddit
    +string Reply
    +DateTime[] Dates
    +bool HasMentionOf(string text)
    +void SetReply(string reply, DateTime[] showDates)
}

class Post <<Aggregate>> {
    +string Id
    +string Author
    +string Title
    +string SelfText
    +string Permalink
    +string Subreddit
    +string Reply
    +DateTime[] Dates
    +bool HasMentionOf(string text)
    +void SetReply(string reply, DateTime[] showDates)
}

class SetlistbotTimerFunc {
    +void Run()
}

SetlistbotTimerFunc --* IRedditSetlistBot

interface IRedditSetlistBot {
    +void ReplyToMentions()
}

class RedditSetlistBot <<IRedditSetlistBot>> {
    +void ReplyToMentions()
    -void ReplyToPosts(string subreddit)
    -void ReplyToComments(string subreddit)
}

RedditSetlistBot ..|> IRedditSetlistBot
RedditSetlistBot --* IRedditService
RedditSetlistBot --* BotOptions
RedditSetlistBot --* ISetlistProviderFactory
RedditSetlistBot --* IReplyBuilderFactory
RedditSetlistBot --* IPostRepository
RedditSetlistBot --* ICommentRepository
' RedditSetlistBot --* ICommentReplyService
' RedditSetlistBot --* IPostReplyService

' interface IPostReplyService {
'     +void Reply(Post post)
' }

' class PostReplyService <<IPostReplyService>> {
'     +void Reply(Post post)
' }

' PostReplyService ..|> IPostReplyService
' PostReplyService --* IPostRepository
' PostReplyService --* IReplyBuilderFactory
' PostReplyService --* ISetlistProviderFactory
' PostReplyService --* IRedditService

' interface ICommentReplyService {
'     +void Reply(Comment comment)
' }

' class CommentReplyService <<ICommentReplyService>> {
'     +void Reply(Comment comment)
' }

' CommentReplyService ..|> ICommentReplyService
' CommentReplyService --* ICommentRepository
' CommentReplyService --* IReplyBuilderFactory
' CommentReplyService --* ISetlistProviderFactory
' CommentReplyService --* IRedditService

class BotOptions <<IOptions>> {
    +string SetlistbotType
    +string Subreddit
    +int MaxSetlistCount
    +bool RequireMention
}

class RedditOptions <<IOptions>> {
    +string Username
    +string Password
    +string Key
    +string Secret
}

interface IRedditClient {
    +string GetAuthToken()
    +string GetComments(string subreddit, string before)
    +string GetPosts(string subreddit, string before)
    +string PostComment(string parent, string text)
}

interface IRedditService {
    +Comment[] GetComments(string subreddit, string before)
    +Post[] GetPosts(string subreddit, string before)
    +bool PostComment(string parent, string text)
}

IRedditService --* IRedditClient
IRedditService --* RedditOptions

interface ICommentRepository {
    +Comment Get(string id)
    +Comment Add(Comment comment)
    +void Delete(Comment comment)
}

ICommentRepository ..> Comment

interface IPostRepository {
    +Post Get(string id)
    +Post Add(Post post)
    +void Delete(Post post)
}

IPostRepository ..> Post

interface IReplyBuilderFactory {
    +IReplyBuilder Get(string artistId)
}

IReplyBuilderFactory ..> IReplyBuilder

interface IReplyBuilder {
    +string ArtistId
    +string BuildReply(Setlist[] setlists)
}

interface ISetlistProviderFactory {
    +ISetlistProvider Get(string artistId)
}

ISetlistProviderFactory ..> ISetlistProvider

interface ISetlistProvider {
    +string ArtistId
    +Setlist GetSetlist(DateTime date)
}

ISetlistProvider ..> Setlist
